@page "/MyPets"
@using System.Collections.Generic;

<h1>My Pets</h1>

<div style="margin-bottom: 15px; display: flex; align-items: center; justify-content: space-between;">
    <div>
        <label for="species-filter">Species:</label>
        <select id="species-filter" @bind="SelectedFilterSpecies" @bind:event="onchange">
            <option value="all">All</option>
            <option value="dog">Dog</option>
            <option value="cat">Cat</option>
            <option value="tarantula">Tarantula</option>
            <option value="tortoise">Tortoise</option>
            <option value="bird">Bird</option>
        </select>
    </div>
    <div>
        <input type="text" placeholder="Search..." @bind="SearchText" @bind:event="oninput"
               style="border-radius: 10px; padding: 5px; width: 250px; border: 1px solid #ccc;" />
        <button style="border-radius: 10px; padding: 5px 15px; background-color: #512bdf; color: white; border: none;" @onclick="ShowPopup">
            Add Pet
        </button>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Species</th>
            <th>Breed</th>
            <th>Gender</th>
            <th>Birthdate</th>
            <th>Update</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pet in FilteredPets)
        {
            <tr>
                <td>@pet.Name</td>
                <td>@pet.Species</td>
                <td>@pet.Breed</td>
                <td>@pet.Gender</td>
                <td>@pet.Birthdate?.ToString("yyyy-MM-dd")</td>
                <td><button class="btn btn-warning btn-sm" @onclick="() => EditPet(pet)">Update</button></td>
                <td><button class="btn btn-danger btn-sm" @onclick="() => DeletePet(pet)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

@if (ShowAddPet)
{
    <div class="custom-modal">
        <div class="modal-content">
            <h3>@(EditingPet != null ? "Edit Pet" : "Add Pet")</h3>
            <label>Name:</label>
            <input type="text" class="form-control" @bind="NewPet.Name" placeholder="Enter pet name" />
            <label>Species:</label>
            <select class="form-control" @bind="NewPet.Species" @bind:event="onchange">
                <option value="dog">Dog</option>
                <option value="cat">Cat</option>
                <option value="bird">Bird</option>
                <option value="tortoise">Tortoise</option>
                <option value="tarantula">Tarantula</option>
            </select>
            <label>Breed:</label>
            <select class="form-control" @bind="NewPet.Breed">
                <option value="">-- Select Breed --</option>
                @foreach (var breed in AvailableBreeds)
                {
                    <option value="@breed">@breed</option>
                }
            </select>
            <label>Gender:</label>
            <select class="form-control" @bind="NewPet.Gender">
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
            <label>Birthdate:</label>
            <input type="date" class="form-control" @bind="NewPet.Birthdate" />
            <div class="modal-buttons">
                <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button class="btn btn-success" @onclick="SavePet">Save</button>
            </div>
        </div>
    </div>
}

@code {
    private List<string> AvailableBreeds = new();
    private List<Pet> Pets = new();
    private List<Pet> FilteredPets = new();
    private Pet NewPet = new();
    private Pet EditingPet;
    private bool ShowAddPet = false;
    private string SelectedFilterSpecies = "all";
    private string SearchText = "";

    private Dictionary<string, List<string>> SpeciesBreeds = new()
    {
        { "dog", new List<string> { "German Shepherd", "Beagle", "Pug", "Dachshund", "Rottweiler" } },
        { "cat", new List<string> { "British Shorthair", "Ragdoll", "Scottish Fold", "Persian Cat", "Munchkin Cat" } },
        { "bird", new List<string> { "Cockatiel", "Green Cheek Conure", "Sun Conure", "Indian Ring Neck", "Eclectus Parrot" } },
        { "tortoise", new List<string> { "Sulcata Tortoise", "Red-footed Tortoise" } },
        { "tarantula", new List<string> { "Chaco Golden Knee", "Mexican Fireleg Tarantula", "Mexican Red Knee Tarantula", "Greenbottle Blue Tarantula", "Antilles Pinktoe Tarantula" } }
    };

    private void UpdateBreeds(ChangeEventArgs e)
    {
        NewPet.Species = e.Value.ToString();
        AvailableBreeds = SpeciesBreeds.ContainsKey(NewPet.Species) ? SpeciesBreeds[NewPet.Species] : new List<string>();
        StateHasChanged();
    }

    private void ShowPopup()
    {
        NewPet = new Pet();
        EditingPet = null;
        ShowAddPet = true;
    }

    private void CloseModal()
    {
        ShowAddPet = false;
    }

    private void SavePet()
    {
        if (EditingPet != null)
        {
            EditingPet.Name = NewPet.Name;
            EditingPet.Species = NewPet.Species;
            EditingPet.Breed = NewPet.Breed;
            EditingPet.Gender = NewPet.Gender;
            EditingPet.Birthdate = NewPet.Birthdate;
        }
        else
        {
            Pets.Add(new Pet
                {
                    Name = NewPet.Name,
                    Species = NewPet.Species,
                    Breed = NewPet.Breed,
                    Gender = NewPet.Gender,
                    Birthdate = NewPet.Birthdate
                });
        }
        FilterPets();
        CloseModal();
    }

    private void EditPet(Pet pet)
    {
        EditingPet = pet;
        NewPet = new Pet
            {
                Name = pet.Name,
                Species = pet.Species,
                Breed = pet.Breed,
                Gender = pet.Gender,
                Birthdate = pet.Birthdate
            };
        ShowAddPet = true;
    }

    private void DeletePet(Pet pet)
    {
        Pets.Remove(pet);
        FilterPets();
    }

    private void FilterPets()
    {
        FilteredPets = Pets
            .Where(p => (SelectedFilterSpecies == "all" || p.Species == SelectedFilterSpecies) &&
                        (string.IsNullOrEmpty(SearchText) || p.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    protected override void OnInitialized()
    {
        FilterPets();
    }

    private class Pet
    {
        public string Name { get; set; }
        public string Species { get; set; }
        public string Breed { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthdate { get; set; }
    }
}
